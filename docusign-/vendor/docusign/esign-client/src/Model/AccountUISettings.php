<?php
/**
 * AccountUISettings
 *
 * PHP version 5
 *
 * @category Class
 * @package  DocuSign\eSign
 * @author   Swaagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * DocuSign REST API
 *
 * The DocuSign REST API provides you with a powerful, convenient, and simple Web services API for interacting with DocuSign.
 *
 * OpenAPI spec version: v2.1
 * Contact: devcenter@docusign.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace DocuSign\eSign\Model;

use \ArrayAccess;

/**
 * AccountUISettings Class Doc Comment
 *
 * @category    Class
 * @package     DocuSign\eSign
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class AccountUISettings implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'accountUISettings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'enable_easy_sign_can_use_multi_template_apply' => 'string',
        'enable_easy_sign_can_use_multi_template_apply_metadata' => '\DocuSign\eSign\Model\SettingsMetadata',
        'enable_easy_sign_template_upload' => 'string',
        'enable_easy_sign_template_upload_metadata' => '\DocuSign\eSign\Model\SettingsMetadata',
        'hide_send_an_envelope' => 'string',
        'hide_send_an_envelope_metadata' => '\DocuSign\eSign\Model\SettingsMetadata',
        'hide_use_a_template' => 'string',
        'hide_use_a_template_in_prepare' => 'string',
        'hide_use_a_template_in_prepare_metadata' => '\DocuSign\eSign\Model\SettingsMetadata',
        'hide_use_a_template_metadata' => '\DocuSign\eSign\Model\SettingsMetadata',
        'order_based_recipient_id_generation' => 'string',
        'order_based_recipient_id_generation_metadata' => '\DocuSign\eSign\Model\SettingsMetadata',
        'remove_envelope_forwarding' => 'string',
        'remove_envelope_forwarding_metadata' => '\DocuSign\eSign\Model\SettingsMetadata',
        'should_redact_access_code' => 'string',
        'should_redact_access_code_metadata' => '\DocuSign\eSign\Model\SettingsMetadata'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'enable_easy_sign_can_use_multi_template_apply' => 'enableEasySignCanUseMultiTemplateApply',
        'enable_easy_sign_can_use_multi_template_apply_metadata' => 'enableEasySignCanUseMultiTemplateApplyMetadata',
        'enable_easy_sign_template_upload' => 'enableEasySignTemplateUpload',
        'enable_easy_sign_template_upload_metadata' => 'enableEasySignTemplateUploadMetadata',
        'hide_send_an_envelope' => 'hideSendAnEnvelope',
        'hide_send_an_envelope_metadata' => 'hideSendAnEnvelopeMetadata',
        'hide_use_a_template' => 'hideUseATemplate',
        'hide_use_a_template_in_prepare' => 'hideUseATemplateInPrepare',
        'hide_use_a_template_in_prepare_metadata' => 'hideUseATemplateInPrepareMetadata',
        'hide_use_a_template_metadata' => 'hideUseATemplateMetadata',
        'order_based_recipient_id_generation' => 'orderBasedRecipientIdGeneration',
        'order_based_recipient_id_generation_metadata' => 'orderBasedRecipientIdGenerationMetadata',
        'remove_envelope_forwarding' => 'removeEnvelopeForwarding',
        'remove_envelope_forwarding_metadata' => 'removeEnvelopeForwardingMetadata',
        'should_redact_access_code' => 'shouldRedactAccessCode',
        'should_redact_access_code_metadata' => 'shouldRedactAccessCodeMetadata'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'enable_easy_sign_can_use_multi_template_apply' => 'setEnableEasySignCanUseMultiTemplateApply',
        'enable_easy_sign_can_use_multi_template_apply_metadata' => 'setEnableEasySignCanUseMultiTemplateApplyMetadata',
        'enable_easy_sign_template_upload' => 'setEnableEasySignTemplateUpload',
        'enable_easy_sign_template_upload_metadata' => 'setEnableEasySignTemplateUploadMetadata',
        'hide_send_an_envelope' => 'setHideSendAnEnvelope',
        'hide_send_an_envelope_metadata' => 'setHideSendAnEnvelopeMetadata',
        'hide_use_a_template' => 'setHideUseATemplate',
        'hide_use_a_template_in_prepare' => 'setHideUseATemplateInPrepare',
        'hide_use_a_template_in_prepare_metadata' => 'setHideUseATemplateInPrepareMetadata',
        'hide_use_a_template_metadata' => 'setHideUseATemplateMetadata',
        'order_based_recipient_id_generation' => 'setOrderBasedRecipientIdGeneration',
        'order_based_recipient_id_generation_metadata' => 'setOrderBasedRecipientIdGenerationMetadata',
        'remove_envelope_forwarding' => 'setRemoveEnvelopeForwarding',
        'remove_envelope_forwarding_metadata' => 'setRemoveEnvelopeForwardingMetadata',
        'should_redact_access_code' => 'setShouldRedactAccessCode',
        'should_redact_access_code_metadata' => 'setShouldRedactAccessCodeMetadata'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'enable_easy_sign_can_use_multi_template_apply' => 'getEnableEasySignCanUseMultiTemplateApply',
        'enable_easy_sign_can_use_multi_template_apply_metadata' => 'getEnableEasySignCanUseMultiTemplateApplyMetadata',
        'enable_easy_sign_template_upload' => 'getEnableEasySignTemplateUpload',
        'enable_easy_sign_template_upload_metadata' => 'getEnableEasySignTemplateUploadMetadata',
        'hide_send_an_envelope' => 'getHideSendAnEnvelope',
        'hide_send_an_envelope_metadata' => 'getHideSendAnEnvelopeMetadata',
        'hide_use_a_template' => 'getHideUseATemplate',
        'hide_use_a_template_in_prepare' => 'getHideUseATemplateInPrepare',
        'hide_use_a_template_in_prepare_metadata' => 'getHideUseATemplateInPrepareMetadata',
        'hide_use_a_template_metadata' => 'getHideUseATemplateMetadata',
        'order_based_recipient_id_generation' => 'getOrderBasedRecipientIdGeneration',
        'order_based_recipient_id_generation_metadata' => 'getOrderBasedRecipientIdGenerationMetadata',
        'remove_envelope_forwarding' => 'getRemoveEnvelopeForwarding',
        'remove_envelope_forwarding_metadata' => 'getRemoveEnvelopeForwardingMetadata',
        'should_redact_access_code' => 'getShouldRedactAccessCode',
        'should_redact_access_code_metadata' => 'getShouldRedactAccessCodeMetadata'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['enable_easy_sign_can_use_multi_template_apply'] = isset($data['enable_easy_sign_can_use_multi_template_apply']) ? $data['enable_easy_sign_can_use_multi_template_apply'] : null;
        $this->container['enable_easy_sign_can_use_multi_template_apply_metadata'] = isset($data['enable_easy_sign_can_use_multi_template_apply_metadata']) ? $data['enable_easy_sign_can_use_multi_template_apply_metadata'] : null;
        $this->container['enable_easy_sign_template_upload'] = isset($data['enable_easy_sign_template_upload']) ? $data['enable_easy_sign_template_upload'] : null;
        $this->container['enable_easy_sign_template_upload_metadata'] = isset($data['enable_easy_sign_template_upload_metadata']) ? $data['enable_easy_sign_template_upload_metadata'] : null;
        $this->container['hide_send_an_envelope'] = isset($data['hide_send_an_envelope']) ? $data['hide_send_an_envelope'] : null;
        $this->container['hide_send_an_envelope_metadata'] = isset($data['hide_send_an_envelope_metadata']) ? $data['hide_send_an_envelope_metadata'] : null;
        $this->container['hide_use_a_template'] = isset($data['hide_use_a_template']) ? $data['hide_use_a_template'] : null;
        $this->container['hide_use_a_template_in_prepare'] = isset($data['hide_use_a_template_in_prepare']) ? $data['hide_use_a_template_in_prepare'] : null;
        $this->container['hide_use_a_template_in_prepare_metadata'] = isset($data['hide_use_a_template_in_prepare_metadata']) ? $data['hide_use_a_template_in_prepare_metadata'] : null;
        $this->container['hide_use_a_template_metadata'] = isset($data['hide_use_a_template_metadata']) ? $data['hide_use_a_template_metadata'] : null;
        $this->container['order_based_recipient_id_generation'] = isset($data['order_based_recipient_id_generation']) ? $data['order_based_recipient_id_generation'] : null;
        $this->container['order_based_recipient_id_generation_metadata'] = isset($data['order_based_recipient_id_generation_metadata']) ? $data['order_based_recipient_id_generation_metadata'] : null;
        $this->container['remove_envelope_forwarding'] = isset($data['remove_envelope_forwarding']) ? $data['remove_envelope_forwarding'] : null;
        $this->container['remove_envelope_forwarding_metadata'] = isset($data['remove_envelope_forwarding_metadata']) ? $data['remove_envelope_forwarding_metadata'] : null;
        $this->container['should_redact_access_code'] = isset($data['should_redact_access_code']) ? $data['should_redact_access_code'] : null;
        $this->container['should_redact_access_code_metadata'] = isset($data['should_redact_access_code_metadata']) ? $data['should_redact_access_code_metadata'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properteis are valid
     */
    public function valid()
    {
        return true;
    }


    /**
     * Gets enable_easy_sign_can_use_multi_template_apply
     * @return string
     */
    public function getEnableEasySignCanUseMultiTemplateApply()
    {
        return $this->container['enable_easy_sign_can_use_multi_template_apply'];
    }

    /**
     * Sets enable_easy_sign_can_use_multi_template_apply
     * @param string $enable_easy_sign_can_use_multi_template_apply 
     * @return $this
     */
    public function setEnableEasySignCanUseMultiTemplateApply($enable_easy_sign_can_use_multi_template_apply)
    {
        $this->container['enable_easy_sign_can_use_multi_template_apply'] = $enable_easy_sign_can_use_multi_template_apply;

        return $this;
    }

    /**
     * Gets enable_easy_sign_can_use_multi_template_apply_metadata
     * @return \DocuSign\eSign\Model\SettingsMetadata
     */
    public function getEnableEasySignCanUseMultiTemplateApplyMetadata()
    {
        return $this->container['enable_easy_sign_can_use_multi_template_apply_metadata'];
    }

    /**
     * Sets enable_easy_sign_can_use_multi_template_apply_metadata
     * @param \DocuSign\eSign\Model\SettingsMetadata $enable_easy_sign_can_use_multi_template_apply_metadata
     * @return $this
     */
    public function setEnableEasySignCanUseMultiTemplateApplyMetadata($enable_easy_sign_can_use_multi_template_apply_metadata)
    {
        $this->container['enable_easy_sign_can_use_multi_template_apply_metadata'] = $enable_easy_sign_can_use_multi_template_apply_metadata;

        return $this;
    }

    /**
     * Gets enable_easy_sign_template_upload
     * @return string
     */
    public function getEnableEasySignTemplateUpload()
    {
        return $this->container['enable_easy_sign_template_upload'];
    }

    /**
     * Sets enable_easy_sign_template_upload
     * @param string $enable_easy_sign_template_upload 
     * @return $this
     */
    public function setEnableEasySignTemplateUpload($enable_easy_sign_template_upload)
    {
        $this->container['enable_easy_sign_template_upload'] = $enable_easy_sign_template_upload;

        return $this;
    }

    /**
     * Gets enable_easy_sign_template_upload_metadata
     * @return \DocuSign\eSign\Model\SettingsMetadata
     */
    public function getEnableEasySignTemplateUploadMetadata()
    {
        return $this->container['enable_easy_sign_template_upload_metadata'];
    }

    /**
     * Sets enable_easy_sign_template_upload_metadata
     * @param \DocuSign\eSign\Model\SettingsMetadata $enable_easy_sign_template_upload_metadata
     * @return $this
     */
    public function setEnableEasySignTemplateUploadMetadata($enable_easy_sign_template_upload_metadata)
    {
        $this->container['enable_easy_sign_template_upload_metadata'] = $enable_easy_sign_template_upload_metadata;

        return $this;
    }

    /**
     * Gets hide_send_an_envelope
     * @return string
     */
    public function getHideSendAnEnvelope()
    {
        return $this->container['hide_send_an_envelope'];
    }

    /**
     * Sets hide_send_an_envelope
     * @param string $hide_send_an_envelope 
     * @return $this
     */
    public function setHideSendAnEnvelope($hide_send_an_envelope)
    {
        $this->container['hide_send_an_envelope'] = $hide_send_an_envelope;

        return $this;
    }

    /**
     * Gets hide_send_an_envelope_metadata
     * @return \DocuSign\eSign\Model\SettingsMetadata
     */
    public function getHideSendAnEnvelopeMetadata()
    {
        return $this->container['hide_send_an_envelope_metadata'];
    }

    /**
     * Sets hide_send_an_envelope_metadata
     * @param \DocuSign\eSign\Model\SettingsMetadata $hide_send_an_envelope_metadata
     * @return $this
     */
    public function setHideSendAnEnvelopeMetadata($hide_send_an_envelope_metadata)
    {
        $this->container['hide_send_an_envelope_metadata'] = $hide_send_an_envelope_metadata;

        return $this;
    }

    /**
     * Gets hide_use_a_template
     * @return string
     */
    public function getHideUseATemplate()
    {
        return $this->container['hide_use_a_template'];
    }

    /**
     * Sets hide_use_a_template
     * @param string $hide_use_a_template 
     * @return $this
     */
    public function setHideUseATemplate($hide_use_a_template)
    {
        $this->container['hide_use_a_template'] = $hide_use_a_template;

        return $this;
    }

    /**
     * Gets hide_use_a_template_in_prepare
     * @return string
     */
    public function getHideUseATemplateInPrepare()
    {
        return $this->container['hide_use_a_template_in_prepare'];
    }

    /**
     * Sets hide_use_a_template_in_prepare
     * @param string $hide_use_a_template_in_prepare 
     * @return $this
     */
    public function setHideUseATemplateInPrepare($hide_use_a_template_in_prepare)
    {
        $this->container['hide_use_a_template_in_prepare'] = $hide_use_a_template_in_prepare;

        return $this;
    }

    /**
     * Gets hide_use_a_template_in_prepare_metadata
     * @return \DocuSign\eSign\Model\SettingsMetadata
     */
    public function getHideUseATemplateInPrepareMetadata()
    {
        return $this->container['hide_use_a_template_in_prepare_metadata'];
    }

    /**
     * Sets hide_use_a_template_in_prepare_metadata
     * @param \DocuSign\eSign\Model\SettingsMetadata $hide_use_a_template_in_prepare_metadata
     * @return $this
     */
    public function setHideUseATemplateInPrepareMetadata($hide_use_a_template_in_prepare_metadata)
    {
        $this->container['hide_use_a_template_in_prepare_metadata'] = $hide_use_a_template_in_prepare_metadata;

        return $this;
    }

    /**
     * Gets hide_use_a_template_metadata
     * @return \DocuSign\eSign\Model\SettingsMetadata
     */
    public function getHideUseATemplateMetadata()
    {
        return $this->container['hide_use_a_template_metadata'];
    }

    /**
     * Sets hide_use_a_template_metadata
     * @param \DocuSign\eSign\Model\SettingsMetadata $hide_use_a_template_metadata
     * @return $this
     */
    public function setHideUseATemplateMetadata($hide_use_a_template_metadata)
    {
        $this->container['hide_use_a_template_metadata'] = $hide_use_a_template_metadata;

        return $this;
    }

    /**
     * Gets order_based_recipient_id_generation
     * @return string
     */
    public function getOrderBasedRecipientIdGeneration()
    {
        return $this->container['order_based_recipient_id_generation'];
    }

    /**
     * Sets order_based_recipient_id_generation
     * @param string $order_based_recipient_id_generation 
     * @return $this
     */
    public function setOrderBasedRecipientIdGeneration($order_based_recipient_id_generation)
    {
        $this->container['order_based_recipient_id_generation'] = $order_based_recipient_id_generation;

        return $this;
    }

    /**
     * Gets order_based_recipient_id_generation_metadata
     * @return \DocuSign\eSign\Model\SettingsMetadata
     */
    public function getOrderBasedRecipientIdGenerationMetadata()
    {
        return $this->container['order_based_recipient_id_generation_metadata'];
    }

    /**
     * Sets order_based_recipient_id_generation_metadata
     * @param \DocuSign\eSign\Model\SettingsMetadata $order_based_recipient_id_generation_metadata
     * @return $this
     */
    public function setOrderBasedRecipientIdGenerationMetadata($order_based_recipient_id_generation_metadata)
    {
        $this->container['order_based_recipient_id_generation_metadata'] = $order_based_recipient_id_generation_metadata;

        return $this;
    }

    /**
     * Gets remove_envelope_forwarding
     * @return string
     */
    public function getRemoveEnvelopeForwarding()
    {
        return $this->container['remove_envelope_forwarding'];
    }

    /**
     * Sets remove_envelope_forwarding
     * @param string $remove_envelope_forwarding 
     * @return $this
     */
    public function setRemoveEnvelopeForwarding($remove_envelope_forwarding)
    {
        $this->container['remove_envelope_forwarding'] = $remove_envelope_forwarding;

        return $this;
    }

    /**
     * Gets remove_envelope_forwarding_metadata
     * @return \DocuSign\eSign\Model\SettingsMetadata
     */
    public function getRemoveEnvelopeForwardingMetadata()
    {
        return $this->container['remove_envelope_forwarding_metadata'];
    }

    /**
     * Sets remove_envelope_forwarding_metadata
     * @param \DocuSign\eSign\Model\SettingsMetadata $remove_envelope_forwarding_metadata
     * @return $this
     */
    public function setRemoveEnvelopeForwardingMetadata($remove_envelope_forwarding_metadata)
    {
        $this->container['remove_envelope_forwarding_metadata'] = $remove_envelope_forwarding_metadata;

        return $this;
    }

    /**
     * Gets should_redact_access_code
     * @return string
     */
    public function getShouldRedactAccessCode()
    {
        return $this->container['should_redact_access_code'];
    }

    /**
     * Sets should_redact_access_code
     * @param string $should_redact_access_code 
     * @return $this
     */
    public function setShouldRedactAccessCode($should_redact_access_code)
    {
        $this->container['should_redact_access_code'] = $should_redact_access_code;

        return $this;
    }

    /**
     * Gets should_redact_access_code_metadata
     * @return \DocuSign\eSign\Model\SettingsMetadata
     */
    public function getShouldRedactAccessCodeMetadata()
    {
        return $this->container['should_redact_access_code_metadata'];
    }

    /**
     * Sets should_redact_access_code_metadata
     * @param \DocuSign\eSign\Model\SettingsMetadata $should_redact_access_code_metadata
     * @return $this
     */
    public function setShouldRedactAccessCodeMetadata($should_redact_access_code_metadata)
    {
        $this->container['should_redact_access_code_metadata'] = $should_redact_access_code_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\DocuSign\eSign\ObjectSerializer::sanitizeForSerialization($this));
    }
}


